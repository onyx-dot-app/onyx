from pydantic import BaseModel

from onyx.configs.constants import DocumentSource
from onyx.context.search.models import SavedSearchDoc


class GroundTruth(BaseModel):
    doc_source: DocumentSource
    doc_link: str


class TestQuery(BaseModel):
    question: str
    ground_truth: list[GroundTruth] = []
    categories: list[str] = []

    # autogenerated
    ground_truth_docids: list[str] = []


class OneshotQAResult(BaseModel):
    time_taken: float
    top_documents: list[SavedSearchDoc]
    answer: str | None


class AnalysisSummary(BaseModel):
    question: str
    categories: list[str]
    found: bool
    rank: int | None
    total_results: int
    ground_truth_count: int
    answer: str | None = None
    time_taken: float | None = None

    # TODO: add additional info needed for answer evaluation
    # the SavedSearchDoc contains the chunk content, making it very easy to apply ragas
    # will also need the content for the ground truth documents


class SearchMetrics(BaseModel):
    total_queries: int
    found_count: int

    # for found results
    best_rank: int
    worst_rank: int
    average_rank: float
    top_k_accuracy: dict[int, float]


# TODO: add answer evaluation metrics
class AnswerMetrics(BaseModel):
    pass


class CombinedMetrics(SearchMetrics, AnswerMetrics):
    average_time_taken: float
