from pydantic import BaseModel

from onyx.configs.constants import DocumentSource
from onyx.context.search.models import SavedSearchDoc


class GroundTruth(BaseModel):
    doc_source: DocumentSource
    doc_link: str


class TestQuery(BaseModel):
    question: str
    ground_truth: list[GroundTruth] = []
    categories: list[str] = []

    # autogenerated
    ground_truth_docids: list[str] = []


class EvalConfig(BaseModel):
    max_search_results: int
    max_answer_context: int
    num_workers: int
    request_timeout: int
    api_url: str
    search_only: bool
    rerank_all: bool


class OneshotQAResult(BaseModel):
    time_taken: float
    top_documents: list[SavedSearchDoc]
    answer: str | None


class DocumentContext(BaseModel):
    document_id: str
    content: str


class AnalysisSummary(BaseModel):
    question: str
    categories: list[str]
    found: bool
    rank: int | None
    total_results: int
    ground_truth_count: int
    answer: str | None = None
    retrieved: list[DocumentContext] = []
    time_taken: float | None = None


class SearchMetrics(BaseModel):
    total_queries: int
    found_count: int

    # for found results
    best_rank: int
    worst_rank: int
    average_rank: float
    top_k_accuracy: dict[int, float]


class AnswerMetrics(BaseModel):
    # context_relevancy: float | None = None
    # answer_relevancy: float | None = None
    # faithfulness: float | None = None
    pass


class CombinedMetrics(SearchMetrics, AnswerMetrics):
    average_time_taken: float
