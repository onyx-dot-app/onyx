from sqlalchemy import text
"""update kg trigger functions

Revision ID: 36e9220ab794
Revises: 220448880151
Create Date: 2024-05-28 15:30:33.189100

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "36e9220ab794"
down_revision = "220448880151"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(text(r"""
        CREATE OR REPLACE FUNCTION update_kg_on_change()
        RETURNS TRIGGER AS $$
        DECLARE
            table_name_text TEXT;
            row_id_text TEXT;
            operation_text TEXT;
        BEGIN
            table_name_text := TG_TABLE_NAME;
            operation_text := TG_OP;

            IF (TG_OP = 'DELETE') THEN
                row_id_text := OLD.id::TEXT;
            ELSE
                row_id_text := NEW.id::TEXT;
            END IF;

            PERFORM pg_notify(
                'kg_updates',
                json_build_object(
                    'table_name', table_name_text,
                    'row_id', row_id_text,
                    'operation', operation_text
                )::TEXT
            );

            RETURN NULL;
        END;
        $$ LANGUAGE plpgsql;
        """)
    )

    table_names = [
        "document",
        "document_chunk",
        "entity",
        "relationship",
    ]

    dialect = op.get_bind().dialect
    for table_name in table_names:
        trigger_name = f"update_{table_name}_kg_trigger"
        quoted_trigger_name = dialect.identifier_preparer.quote(trigger_name)
        quoted_table_name = dialect.identifier_preparer.quote(table_name)
        op.execute(text(r"""
            CREATE OR REPLACE TRIGGER {quoted_trigger_name}
            AFTER INSERT OR UPDATE OR DELETE ON {quoted_table_name}
            FOR EACH ROW
            EXECUTE FUNCTION update_kg_on_change();
            """)
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    table_names = [
        "document",
        "document_chunk",
        "entity",
        "relationship",
    ]

    dialect = op.get_bind().dialect
    for table_name in table_names:
        trigger_name = f"update_{table_name}_kg_trigger"
        quoted_trigger_name = dialect.identifier_preparer.quote(trigger_name)
        quoted_table_name = dialect.identifier_preparer.quote(table_name)
        op.execute(text(r"DROP TRIGGER IF EXISTS {quoted_trigger_name} ON {quoted_table_name};"))

    op.execute("DROP FUNCTION IF EXISTS update_kg_on_change();")
    # ### end Alembic commands ###
